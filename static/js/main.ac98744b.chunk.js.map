{"version":3,"sources":["components/Header.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","props","className","text","Search","useState","searchValue","setSearchValue","value","onChange","e","target","type","placeholder","name","onClick","preventDefault","search","disabled","App","loading","setLoading","movies","setMovies","errorMessage","setErrorMessage","useEffect","fetch","then","response","json","jsonResponse","Response","Error","scope","map","movie","key","id","Title","Year","Type","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4OAUeA,G,MARA,SAACC,GACd,OACE,4BAAQC,UAAU,cAChB,4BAAKD,EAAME,SC8BFC,EAhCA,SAACH,GAAW,IAAD,EACcI,mBAAS,IADvB,mBACjBC,EADiB,KACJC,EADI,KAkBxB,OACI,0BAAML,UAAU,UACd,2BACEM,MAAOF,EACPG,SAnByB,SAACC,GAChCH,EAAeG,EAAEC,OAAOH,QAmBlBI,KAAK,OACLC,YAAY,qBACZC,KAAK,cAEP,2BAAOC,QAhBc,SAACL,GAC1BA,EAAEM,iBAEFf,EAAMgB,OAAOX,GANbC,EAAe,KAmByBK,KAAK,SAASJ,MAAM,QAAQU,UAAWZ,MCoDpEa,EAzEH,WAAO,IAAD,EACcd,oBAAS,GADvB,mBACTe,EADS,KACAC,EADA,OAEYhB,mBAAS,IAFrB,mBAETiB,EAFS,KAEDC,EAFC,OAGwBlB,mBAAS,MAHjC,mBAGTmB,EAHS,KAGKC,EAHL,KAKdC,qBAAU,WACVC,MATkB,kDAUfC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJR,EAAUQ,EAAa3B,QACvBiB,GAAW,QAEd,IAqBD,OACC,yBAAKnB,UAAU,OACd,kBAAC,EAAD,CAAQC,KAAK,kBACb,kBAAC,EAAD,CAAQc,OAtBK,SAAAX,GACfe,GAAW,GACXI,EAAgB,MAEhBE,MAAM,8BAAD,OAA+BrB,EAA/B,qBACFsB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAC0B,SAA1BA,EAAaC,UACfT,EAAUQ,EAAa3B,QACvBiB,GAAW,KAEXI,EAAgBM,EAAaE,OAC7BZ,GAAW,UAWf,yBAAKnB,UAAU,UACZkB,IAAYI,EACZ,4CACIA,EACH,yBAAKtB,UAAU,gBAAgBsB,GAE/B,2BAAOtB,UAAU,SACjB,2BAAOA,UAAU,cACf,4BACI,wBAAIgC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,UAGN,+BAEGZ,EAAOa,KAAI,SAACC,GAAD,OACV,wBAAIC,IAAKD,EAAME,IACb,4BAAKF,EAAMG,OACX,4BAAKH,EAAMI,MACX,4BAAKJ,EAAMK,eCtDPC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ac98744b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <h2>{props.text}</h2>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;","import React, { useState } from \"react\";\r\n\r\n\r\nconst Search = (props) => {\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n\r\n  const handleSearchInputChanges = (e) => {\r\n    setSearchValue(e.target.value);\r\n  }\r\n\r\n  const resetInputField = () => {\r\n    setSearchValue(\"\")\r\n  }\r\n\r\n  const callSearchFunction = (e) => {\r\n    e.preventDefault();\r\n    \r\n    props.search(searchValue);\r\n    resetInputField();\r\n  }\r\n\r\n  return (\r\n      <form className=\"search\">\r\n        <input\r\n          value={searchValue}\r\n          onChange={handleSearchInputChanges}\r\n          type=\"text\"\r\n          placeholder=\"Enter a movie name\"\r\n          name=\"SearchBar\"\r\n        />\r\n        <input onClick={callSearchFunction} type=\"submit\" value=\"Fetch\" disabled={!searchValue}/>\r\n      </form>\r\n    );\r\n}\r\n\r\nexport default Search;","import React, { useState, useEffect } from \"react\";\nimport \"../App.css\";\nimport Header from \"./Header\";\nimport Search from \"./Search\";\n\n\nconst MOVIE_API_URL = \"https://www.omdbapi.com/?s=man&apikey=4a3b711b\"; // you should replace this with yours\n\n\nconst App = () => {\n  const [loading, setLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n    useEffect(() => {\n    fetch(MOVIE_API_URL)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        setMovies(jsonResponse.Search);\n        setLoading(false);\n      });\n  }, []);\n\n    const search = searchValue => {\n    setLoading(true);\n    setErrorMessage(null);\n\n    fetch(`https://www.omdbapi.com/?s=${searchValue}&apikey=4a3b711b`)\n      .then(response => response.json())\n      .then(jsonResponse => {\n        if (jsonResponse.Response === \"True\") {\n          setMovies(jsonResponse.Search);\n          setLoading(false);\n        } else {\n          setErrorMessage(jsonResponse.Error);\n          setLoading(false);\n        }\n      });\n    };\n    \n\n\n    return (\n     <div className=\"App\">\n      <Header text=\"Search Movies\" />\n      <Search search={search} />\n      <div className=\"movies\">\n        {loading && !errorMessage ? (\n         <span>loading...</span>\n         ) : errorMessage ? (\n          <div className=\"errorMessage\">{errorMessage}</div>\n        ) : (\n          <table className=\"table\">\n          <thead className=\"thead-dark\">\n            <tr>\n                <th scope=\"col\">Title</th>\n                <th scope=\"col\">Year</th>\n                <th scope=\"col\">Type</th>\n            </tr>\n          </thead>\n          <tbody>\n            \n            {movies.map((movie) => (\n              <tr key={movie.id}>\n                <td>{movie.Title}</td>\n                <td>{movie.Year}</td>\n                <td>{movie.Type}</td>\n              </tr>\n              \n              \n             ))}\n             \n          </tbody>\n        </table>\n            \n        )}\n      </div>\n    </div>\n  );\n};\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}